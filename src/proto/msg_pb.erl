%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.2.1
-module(msg_pb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_cmd/1, enum_value_by_symbol_cmd/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("msg_pb.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'cmd'() :: 'Login_Request' | 'Login_Response' | 'Send_Message_Request' | 'Send_Message_Response'.
-export_type(['cmd'/0]).

%% message types
-type 'LoginRequest'() :: #'LoginRequest'{}.
-type 'LoginResponse'() :: #'LoginResponse'{}.
-type 'SendMessageRequest'() :: #'SendMessageRequest'{}.
-type 'Request'() :: #'Request'{}.
-export_type(['LoginRequest'/0, 'LoginResponse'/0, 'SendMessageRequest'/0, 'Request'/0]).

-spec encode_msg(#'LoginRequest'{} | #'LoginResponse'{} | #'SendMessageRequest'{} | #'Request'{}) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(#'LoginRequest'{} | #'LoginResponse'{} | #'SendMessageRequest'{} | #'Request'{}, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'LoginRequest'{} ->
	  e_msg_LoginRequest(Msg, TrUserData);
      #'LoginResponse'{} ->
	  e_msg_LoginResponse(Msg, TrUserData);
      #'SendMessageRequest'{} ->
	  e_msg_SendMessageRequest(Msg, TrUserData);
      #'Request'{} -> e_msg_Request(Msg, TrUserData)
    end.



e_msg_LoginRequest(Msg, TrUserData) ->
    e_msg_LoginRequest(Msg, <<>>, TrUserData).


e_msg_LoginRequest(#'LoginRequest'{username = F1,
				   password = F2},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>)
    end.

e_msg_LoginResponse(Msg, TrUserData) ->
    e_msg_LoginResponse(Msg, <<>>, TrUserData).


e_msg_LoginResponse(#'LoginResponse'{token = F1}, Bin,
		    TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_SendMessageRequest(Msg, TrUserData) ->
    e_msg_SendMessageRequest(Msg, <<>>, TrUserData).


e_msg_SendMessageRequest(#'SendMessageRequest'{sender =
						   F1,
					       receiver = F2, text = F3,
					       msgtype = F4},
			 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_string(TrF1, <<Bin/binary, 10>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_string(TrF2, <<B1/binary, 18>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_string(TrF3, <<B2/binary, 26>>)
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     e_type_string(TrF4, <<B3/binary, 34>>)
	   end
    end.

e_msg_Request(Msg, TrUserData) ->
    e_msg_Request(Msg, <<>>, TrUserData).


e_msg_Request(#'Request'{login = F1, send_message = F2},
	      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_mfield_Request_login(TrF1, <<Bin/binary, 10>>,
					 TrUserData)
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_mfield_Request_send_message(TrF2, <<B1/binary, 18>>,
					   TrUserData)
	   end
    end.

e_mfield_Request_login(Msg, Bin, TrUserData) ->
    SubBin = e_msg_LoginRequest(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Request_send_message(Msg, Bin, TrUserData) ->
    SubBin = e_msg_SendMessageRequest(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
-ifdef('GPB_PATTERN_STACK').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

-endif.

decode_msg_2_doit('LoginRequest', Bin, TrUserData) ->
    d_msg_LoginRequest(Bin, TrUserData);
decode_msg_2_doit('LoginResponse', Bin, TrUserData) ->
    d_msg_LoginResponse(Bin, TrUserData);
decode_msg_2_doit('SendMessageRequest', Bin,
		  TrUserData) ->
    d_msg_SendMessageRequest(Bin, TrUserData);
decode_msg_2_doit('Request', Bin, TrUserData) ->
    d_msg_Request(Bin, TrUserData).



d_msg_LoginRequest(Bin, TrUserData) ->
    dfp_read_field_def_LoginRequest(Bin, 0, 0,
				    id(undefined, TrUserData),
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_LoginRequest(<<10, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_LoginRequest_username(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_LoginRequest(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_LoginRequest_password(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_LoginRequest(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #'LoginRequest'{username = F@_1, password = F@_2};
dfp_read_field_def_LoginRequest(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_LoginRequest(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_LoginRequest(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LoginRequest(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_LoginRequest(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_LoginRequest_username(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      18 ->
	  d_field_LoginRequest_password(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LoginRequest(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_LoginRequest(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_LoginRequest(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_LoginRequest(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_LoginRequest(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_LoginRequest(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #'LoginRequest'{username = F@_1, password = F@_2}.

d_field_LoginRequest_username(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LoginRequest_username(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_LoginRequest_username(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_LoginRequest(RestF, 0, 0, NewFValue,
				    F@_2, TrUserData).

d_field_LoginRequest_password(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LoginRequest_password(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_LoginRequest_password(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_LoginRequest(RestF, 0, 0, F@_1,
				    NewFValue, TrUserData).

skip_varint_LoginRequest(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_LoginRequest(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_LoginRequest(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LoginRequest(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_LoginRequest(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_LoginRequest(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_LoginRequest(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LoginRequest(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_LoginRequest(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LoginRequest(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_LoginRequest(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LoginRequest(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_LoginRequest(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LoginRequest(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

d_msg_LoginResponse(Bin, TrUserData) ->
    dfp_read_field_def_LoginResponse(Bin, 0, 0,
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_LoginResponse(<<10, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    d_field_LoginResponse_token(Rest, Z1, Z2, F@_1,
				TrUserData);
dfp_read_field_def_LoginResponse(<<>>, 0, 0, F@_1, _) ->
    #'LoginResponse'{token = F@_1};
dfp_read_field_def_LoginResponse(Other, Z1, Z2, F@_1,
				 TrUserData) ->
    dg_read_field_def_LoginResponse(Other, Z1, Z2, F@_1,
				    TrUserData).

dg_read_field_def_LoginResponse(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LoginResponse(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_LoginResponse(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_LoginResponse_token(Rest, 0, 0, F@_1,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LoginResponse(Rest, 0, 0, F@_1, TrUserData);
	    1 ->
		skip_64_LoginResponse(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_LoginResponse(Rest, 0, 0, F@_1,
						    TrUserData);
	    3 ->
		skip_group_LoginResponse(Rest, Key bsr 3, 0, F@_1,
					 TrUserData);
	    5 -> skip_32_LoginResponse(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_LoginResponse(<<>>, 0, 0, F@_1, _) ->
    #'LoginResponse'{token = F@_1}.

d_field_LoginResponse_token(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_LoginResponse_token(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
d_field_LoginResponse_token(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_LoginResponse(RestF, 0, 0, NewFValue,
				     TrUserData).

skip_varint_LoginResponse(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    skip_varint_LoginResponse(Rest, Z1, Z2, F@_1,
			      TrUserData);
skip_varint_LoginResponse(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    dfp_read_field_def_LoginResponse(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_length_delimited_LoginResponse(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_LoginResponse(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_LoginResponse(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LoginResponse(Rest2, 0, 0, F@_1,
				     TrUserData).

skip_group_LoginResponse(Bin, FNum, Z2, F@_1,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LoginResponse(Rest, 0, Z2, F@_1,
				     TrUserData).

skip_32_LoginResponse(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_LoginResponse(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_64_LoginResponse(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_LoginResponse(Rest, Z1, Z2, F@_1,
				     TrUserData).

d_msg_SendMessageRequest(Bin, TrUserData) ->
    dfp_read_field_def_SendMessageRequest(Bin, 0, 0,
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_SendMessageRequest(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    d_field_SendMessageRequest_sender(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_SendMessageRequest(<<18,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    d_field_SendMessageRequest_receiver(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_SendMessageRequest(<<26,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    d_field_SendMessageRequest_text(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_SendMessageRequest(<<34,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    d_field_SendMessageRequest_msgtype(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_SendMessageRequest(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, _) ->
    #'SendMessageRequest'{sender = F@_1, receiver = F@_2,
			  text = F@_3, msgtype = F@_4};
dfp_read_field_def_SendMessageRequest(Other, Z1, Z2,
				      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_SendMessageRequest(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_SendMessageRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SendMessageRequest(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData);
dg_read_field_def_SendMessageRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_SendMessageRequest_sender(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, TrUserData);
      18 ->
	  d_field_SendMessageRequest_receiver(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, TrUserData);
      26 ->
	  d_field_SendMessageRequest_text(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, TrUserData);
      34 ->
	  d_field_SendMessageRequest_msgtype(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_SendMessageRequest(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, TrUserData);
	    1 ->
		skip_64_SendMessageRequest(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, TrUserData);
	    2 ->
		skip_length_delimited_SendMessageRequest(Rest, 0, 0,
							 F@_1, F@_2, F@_3, F@_4,
							 TrUserData);
	    3 ->
		skip_group_SendMessageRequest(Rest, Key bsr 3, 0, F@_1,
					      F@_2, F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_SendMessageRequest(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, TrUserData)
	  end
    end;
dg_read_field_def_SendMessageRequest(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, _) ->
    #'SendMessageRequest'{sender = F@_1, receiver = F@_2,
			  text = F@_3, msgtype = F@_4}.

d_field_SendMessageRequest_sender(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_SendMessageRequest_sender(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
d_field_SendMessageRequest_sender(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_SendMessageRequest(RestF, 0, 0,
					  NewFValue, F@_2, F@_3, F@_4,
					  TrUserData).

d_field_SendMessageRequest_receiver(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_SendMessageRequest_receiver(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData);
d_field_SendMessageRequest_receiver(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_SendMessageRequest(RestF, 0, 0, F@_1,
					  NewFValue, F@_3, F@_4, TrUserData).

d_field_SendMessageRequest_text(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_SendMessageRequest_text(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
d_field_SendMessageRequest_text(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_SendMessageRequest(RestF, 0, 0, F@_1,
					  F@_2, NewFValue, F@_4, TrUserData).

d_field_SendMessageRequest_msgtype(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_SendMessageRequest_msgtype(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData);
d_field_SendMessageRequest_msgtype(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_SendMessageRequest(RestF, 0, 0, F@_1,
					  F@_2, F@_3, NewFValue, TrUserData).

skip_varint_SendMessageRequest(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_SendMessageRequest(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData);
skip_varint_SendMessageRequest(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_SendMessageRequest(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_SendMessageRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData)
    when N < 57 ->
    skip_length_delimited_SendMessageRequest(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, TrUserData);
skip_length_delimited_SendMessageRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SendMessageRequest(Rest2, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, TrUserData).

skip_group_SendMessageRequest(Bin, FNum, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SendMessageRequest(Rest, 0, Z2, F@_1,
					  F@_2, F@_3, F@_4, TrUserData).

skip_32_SendMessageRequest(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_SendMessageRequest(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_SendMessageRequest(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_SendMessageRequest(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData).

d_msg_Request(Bin, TrUserData) ->
    dfp_read_field_def_Request(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Request(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, TrUserData) ->
    d_field_Request_login(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
dfp_read_field_def_Request(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, TrUserData) ->
    d_field_Request_send_message(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_Request(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'Request'{login = F@_1, send_message = F@_2};
dfp_read_field_def_Request(Other, Z1, Z2, F@_1, F@_2,
			   TrUserData) ->
    dg_read_field_def_Request(Other, Z1, Z2, F@_1, F@_2,
			      TrUserData).

dg_read_field_def_Request(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Request(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
dg_read_field_def_Request(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Request_login(Rest, 0, 0, F@_1, F@_2,
				TrUserData);
      18 ->
	  d_field_Request_send_message(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Request(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 ->
		skip_64_Request(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_Request(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    3 ->
		skip_group_Request(Rest, Key bsr 3, 0, F@_1, F@_2,
				   TrUserData);
	    5 -> skip_32_Request(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_Request(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'Request'{login = F@_1, send_message = F@_2}.

d_field_Request_login(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Request_login(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
d_field_Request_login(<<0:1, X:7, Rest/binary>>, N, Acc,
		      Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_LoginRequest(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Request(RestF, 0, 0,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_LoginRequest(Prev, NewFValue,
							     TrUserData)
			       end,
			       F@_2, TrUserData).

d_field_Request_send_message(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Request_send_message(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_Request_send_message(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_SendMessageRequest(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Request(RestF, 0, 0, F@_1,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_SendMessageRequest(Prev,
								   NewFValue,
								   TrUserData)
			       end,
			       TrUserData).

skip_varint_Request(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, TrUserData) ->
    skip_varint_Request(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
skip_varint_Request(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

skip_length_delimited_Request(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Request(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_Request(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Request(Rest2, 0, 0, F@_1, F@_2,
			       TrUserData).

skip_group_Request(Bin, FNum, Z2, F@_1, F@_2,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Request(Rest, 0, Z2, F@_1, F@_2,
			       TrUserData).

skip_32_Request(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

skip_64_Request(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #'LoginRequest'{} ->
	  merge_msg_LoginRequest(Prev, New, TrUserData);
      #'LoginResponse'{} ->
	  merge_msg_LoginResponse(Prev, New, TrUserData);
      #'SendMessageRequest'{} ->
	  merge_msg_SendMessageRequest(Prev, New, TrUserData);
      #'Request'{} -> merge_msg_Request(Prev, New, TrUserData)
    end.

merge_msg_LoginRequest(#'LoginRequest'{},
		       #'LoginRequest'{username = NFusername,
				       password = NFpassword},
		       _) ->
    #'LoginRequest'{username = NFusername,
		    password = NFpassword}.

merge_msg_LoginResponse(#'LoginResponse'{},
			#'LoginResponse'{token = NFtoken}, _) ->
    #'LoginResponse'{token = NFtoken}.

merge_msg_SendMessageRequest(#'SendMessageRequest'{sender
						       = PFsender,
						   receiver = PFreceiver,
						   text = PFtext,
						   msgtype = PFmsgtype},
			     #'SendMessageRequest'{sender = NFsender,
						   receiver = NFreceiver,
						   text = NFtext,
						   msgtype = NFmsgtype},
			     _) ->
    #'SendMessageRequest'{sender =
			      if NFsender =:= undefined -> PFsender;
				 true -> NFsender
			      end,
			  receiver =
			      if NFreceiver =:= undefined -> PFreceiver;
				 true -> NFreceiver
			      end,
			  text =
			      if NFtext =:= undefined -> PFtext;
				 true -> NFtext
			      end,
			  msgtype =
			      if NFmsgtype =:= undefined -> PFmsgtype;
				 true -> NFmsgtype
			      end}.

merge_msg_Request(#'Request'{login = PFlogin,
			     send_message = PFsend_message},
		  #'Request'{login = NFlogin,
			     send_message = NFsend_message},
		  TrUserData) ->
    #'Request'{login =
		   if PFlogin /= undefined, NFlogin /= undefined ->
			  merge_msg_LoginRequest(PFlogin, NFlogin, TrUserData);
		      PFlogin == undefined -> NFlogin;
		      NFlogin == undefined -> PFlogin
		   end,
	       send_message =
		   if PFsend_message /= undefined,
		      NFsend_message /= undefined ->
			  merge_msg_SendMessageRequest(PFsend_message,
						       NFsend_message,
						       TrUserData);
		      PFsend_message == undefined -> NFsend_message;
		      NFsend_message == undefined -> PFsend_message
		   end}.


verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'LoginRequest'{} ->
	  v_msg_LoginRequest(Msg, ['LoginRequest'], TrUserData);
      #'LoginResponse'{} ->
	  v_msg_LoginResponse(Msg, ['LoginResponse'], TrUserData);
      #'SendMessageRequest'{} ->
	  v_msg_SendMessageRequest(Msg, ['SendMessageRequest'],
				   TrUserData);
      #'Request'{} ->
	  v_msg_Request(Msg, ['Request'], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_LoginRequest/3}).
v_msg_LoginRequest(#'LoginRequest'{username = F1,
				   password = F2},
		   Path, _) ->
    v_type_string(F1, [username | Path]),
    v_type_string(F2, [password | Path]),
    ok;
v_msg_LoginRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LoginRequest'}, X, Path).

-dialyzer({nowarn_function,v_msg_LoginResponse/3}).
v_msg_LoginResponse(#'LoginResponse'{token = F1}, Path,
		    _) ->
    v_type_string(F1, [token | Path]), ok.

-dialyzer({nowarn_function,v_msg_SendMessageRequest/3}).
v_msg_SendMessageRequest(#'SendMessageRequest'{sender =
						   F1,
					       receiver = F2, text = F3,
					       msgtype = F4},
			 Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [sender | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [receiver | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [text | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [msgtype | Path])
    end,
    ok;
v_msg_SendMessageRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'SendMessageRequest'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_Request/3}).
v_msg_Request(#'Request'{login = F1, send_message = F2},
	      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_LoginRequest(F1, [login | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_SendMessageRequest(F2, [send_message | Path],
				    TrUserData)
    end,
    ok.

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.


get_msg_defs() ->
    [{{enum, cmd},
      [{'Login_Request', 1001}, {'Login_Response', 1002},
       {'Send_Message_Request', 1003},
       {'Send_Message_Response', 1004}]},
     {{msg, 'LoginRequest'},
      [#field{name = username, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = password, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'LoginResponse'},
      [#field{name = token, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'SendMessageRequest'},
      [#field{name = sender, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = receiver, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = text, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []},
       #field{name = msgtype, fnum = 4, rnum = 5,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'Request'},
      [#field{name = login, fnum = 1, rnum = 2,
	      type = {msg, 'LoginRequest'}, occurrence = optional,
	      opts = []},
       #field{name = send_message, fnum = 2, rnum = 3,
	      type = {msg, 'SendMessageRequest'},
	      occurrence = optional, opts = []}]}].


get_msg_names() ->
    ['LoginRequest', 'LoginResponse', 'SendMessageRequest',
     'Request'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['LoginRequest', 'LoginResponse', 'SendMessageRequest',
     'Request'].


get_enum_names() -> [cmd].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('LoginRequest') ->
    [#field{name = username, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = password, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []}];
find_msg_def('LoginResponse') ->
    [#field{name = token, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('SendMessageRequest') ->
    [#field{name = sender, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = receiver, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = text, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []},
     #field{name = msgtype, fnum = 4, rnum = 5,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('Request') ->
    [#field{name = login, fnum = 1, rnum = 2,
	    type = {msg, 'LoginRequest'}, occurrence = optional,
	    opts = []},
     #field{name = send_message, fnum = 2, rnum = 3,
	    type = {msg, 'SendMessageRequest'},
	    occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(cmd) ->
    [{'Login_Request', 1001}, {'Login_Response', 1002},
     {'Send_Message_Request', 1003},
     {'Send_Message_Response', 1004}];
find_enum_def(_) -> error.


enum_symbol_by_value(cmd, Value) ->
    enum_symbol_by_value_cmd(Value).


enum_value_by_symbol(cmd, Sym) ->
    enum_value_by_symbol_cmd(Sym).


enum_symbol_by_value_cmd(1001) -> 'Login_Request';
enum_symbol_by_value_cmd(1002) -> 'Login_Response';
enum_symbol_by_value_cmd(1003) ->
    'Send_Message_Request';
enum_symbol_by_value_cmd(1004) ->
    'Send_Message_Response'.


enum_value_by_symbol_cmd('Login_Request') -> 1001;
enum_value_by_symbol_cmd('Login_Response') -> 1002;
enum_value_by_symbol_cmd('Send_Message_Request') ->
    1003;
enum_value_by_symbol_cmd('Send_Message_Response') ->
    1004.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> chat.



gpb_version_as_string() ->
    "4.2.1".

gpb_version_as_list() ->
    [4,2,1].
